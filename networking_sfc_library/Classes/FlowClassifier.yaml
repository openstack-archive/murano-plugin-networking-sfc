#  Copyright 2016 Mirantis, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: org.openstack.networkingSfc
  std: io.murano

Name: FlowClassifier

Properties:
  id:
    Contract: $.string()
    Usage: Out

  name:
    Contract: $.string()

  description:
    Contract: $.string()

  ethertype:
    Contract: $.string().notNull()
    Default: 'IPv4'

  protocol:
    Contract: $.string()

  sourcePortMin:
    Contract: $.int()

  sourcePortMax:
    Contract: $.int()

  destinationPortMin:
    Contract: $.int()

  destinationPortMax:
    Contract: $.int()

  sourceIpPrefix:
    Contract: $.string()

  destinationIpPrefix:
    Contract: $.string()

  logicalSourcePort:
    Contract: $.class(NeutronPort).notNull()

  logicalDestinationPort:
    Contract: $.class(NeutronPort).notNull()

Methods:
  .init:
    Body:
      - $env: $.find(std:Environment).require()
      - $.sfcClient: new('io.murano.extensions.networking_sfc.NetworkingSfcClient', $env)

  deploy:
    Body:
      - If: $.getAttr(deployed, false)
        Then:
          - Return: null

      - $data: $.sfcClient.createFlowClassifier(
          name => $.name, description => $.description,
          ethertype => $.ethertype, protocol => $.protocol,
          source_port_range_min => $.sourcePortMin,
          source_port_range_max => $.sourcePortMax,
          destination_port_range_min => $.destinationPortMin,
          destination_port_range_max => $.destinationPortMax,
          source_ip_prefix => $.sourceIpPrefix,
          destination_ip_prefix => $.destinationIpPrefix,
          logical_source_port => $.logicalSourcePort.openstackId,
          logical_destination_port => $.logicalDestinationPort.openstackId)
      - $.id: $data.id
      - $.setAttr(deployed, true)

  .destroy:
    Body:
      - If: $.getAttr(deployed, false)
        Then:
          - $.sfcClient.deleteFlowClassifier($.id)
